import io.spring.gradle.dependencymanagement.dsl.DependencyManagementExtension
import org.gradle.api.plugins.ExtensionAware

/*
 * This file was generated by the Gradle "init" task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/5.0/userguide/java_library_plugin.html
 */

plugins {
    application
    // Apply the java-library plugin to add support for Java Library
    `java-library`
    id("org.springframework.boot") version "2.0.5.RELEASE"
    id("io.spring.dependency-management") version "1.0.6.RELEASE"
    //id("com.android.application")
}
application {
    mainClassName = "com.example.demo.ApplicationKt"
}
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
    google()
}

tasks {
    // Use the native JUnit support of Gradle.
    "test"(Test::class) {
        useJUnitPlatform()
    }
}

val kotlin_version = "1.3.11"
val spek_version = "2.0.0-rc.1"
val springBootVersion = "2.0.5.RELEASE"
val springCloudVersion = "Finchley.SR2"

configure<DependencyManagementExtension> {
    imports {
        mavenBom ("org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}")
    }
}


dependencies {

    compile("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    compile("org.springframework.cloud:spring-cloud-starter-vault-config")
    //compile ("org.junit.platform:junit-platform-gradle-plugin:1.2.0")

    // JUnit 5
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.2.0")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.2.0")
    testRuntime("org.junit.platform:junit-platform-console:1.2.0")

    compile ("com.google.api-client:google-api-client:1.25.0")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("com.google.maps:google-maps-services:0.9.1")
    testImplementation("org.springframework.boot:spring-boot-starter-test")

    // some version of Kotlin
    implementation ("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version")

    testImplementation ("org.spekframework.spek2:spek-dsl-jvm:${spek_version}")  {
        exclude (group = "org.jetbrains.kotlin")
    }
    testRuntimeOnly ("org.spekframework.spek2:spek-runner-junit5:${spek_version}") {
        exclude (group = "org.junit.platform")
        exclude (group ="org.jetbrains.kotlin")
    }

    // spek requires kotlin-reflect, can be omitted if already in the classpath
    testRuntimeOnly ("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version")
}


